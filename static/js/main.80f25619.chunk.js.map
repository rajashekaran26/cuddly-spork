{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","prop1","name","email","id","className","alt","src","CardList","robotsAsProp","cardsArray","map","user","i","key","SearchBox","searchChangeAsProp","type","placeholder","onChange","Scroll","cardListAsProp","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","props","Component","App","onSearchChangeFunc","event","searchField","target","value","robotsAsState","fetch","then","response","json","singleRobot","filteredRobots","filter","toLowerCase","includes","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6CCASC,G,MAhBF,SAACC,GAAW,IACdC,EAAmBD,EAAnBC,KAAMC,EAAaF,EAAbE,MAAOC,EAAMH,EAANG,GACxB,OACI,yBAAKC,UAAU,uDACX,yBAAMC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACtB,6BACI,4BAAKF,GACL,2BAAIC,OCWDK,EAjBE,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aACTC,EAAaD,EAAaE,KAAI,SAACC,EAAKC,GACvC,OACI,kBAAC,EAAD,CAASC,IAAKD,EACLT,GAAIK,EAAaI,GAAGT,GACpBF,KAAMO,EAAaI,GAAGX,KACtBC,MAAOM,EAAaI,GAAGV,WAIvC,OACJ,6BACCO,ICDcK,EAZG,SAAC,GAA0B,IAAzBC,EAAwB,EAAxBA,mBAChB,OACI,yBAAKX,UAAU,OACX,2BAAOA,UAAU,mCACbY,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCEXI,EARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAChEJ,EAAeK,WCiBbC,E,YAnBX,aAAe,IAAD,8BACV,+CACKC,MAAQ,CACTC,UAAW,GAHL,E,+EAOIC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAIxB,OAAGG,KAAKJ,MAAMC,SACH,yDAECG,KAAKE,MAAMR,a,GAhBHS,aCwCbC,E,YAlCb,aAAe,IAAD,8BACZ,+CAWJC,mBAAqB,SAACC,GACpB,EAAKL,SAAS,CAACM,YAAaD,EAAME,OAAOC,SAXvC,EAAKb,MAAO,CACVc,cAAe,GACfH,YAAa,IAJH,E,iFAOQ,IAAD,OACnBI,MAAO,8CACJC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAW,OAAE,EAAKd,SAAS,CAACS,cAAcK,S,+BAK1C,IAAD,EAC8Bf,KAAKJ,MAAnCc,EADA,EACAA,cAAeH,EADf,EACeA,YAChBS,EAAiBN,EAAcO,QAAO,SAAAF,GAC1C,OAAOA,EAAY7C,KAAKgD,cAAcC,SAASZ,EAAYW,kBAE7D,OACE,yBAAK7C,UAAU,OACb,2CACA,kBAAC,EAAD,CAAWW,mBAAoBgB,KAAKK,qBACpC,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAU5B,aAAcuC,W,GA3BlBb,aCAlBiB,IAASC,OACT,kBAAC,EAAD,MACMC,SAASC,eAAe,SPwHxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMd,MAAK,SAAAe,GACjCA,EAAaC,iB","file":"static/js/main.80f25619.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\n\r\nconst Card = (prop1) => {\r\n    const {name, email, id} = prop1;\r\nreturn (\r\n    <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 tc'>\r\n        <img  alt='robots' src={`https://robohash.org/${id}?200x200`}/>\r\n        <div>\r\n            <h2>{name}</h2>\r\n            <p>{email}</p>\r\n        </div>\r\n    </div>\r\n);\r\n\r\n}\r\n\r\n\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robotsAsProp}) => {\r\n    const cardsArray = robotsAsProp.map((user,i) => {\r\n       return (\r\n           <Card    key={i} \r\n                    id={robotsAsProp[i].id} \r\n                    name={robotsAsProp[i].name} \r\n                    email={robotsAsProp[i].email}\r\n            />\r\n       ); \r\n    })\r\n    return (\r\n<div>\r\n{cardsArray}    \r\n</div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChangeAsProp}) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input className='pa3 ba b--green bg-lightest-blue'\r\n                type='search' \r\n                placeholder='Search Robots' \r\n                onChange={searchChangeAsProp}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (cardListAsProp) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '500px'}}>\r\n            {cardListAsProp.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            hasError : false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({hasError:true})\r\n    }\r\n\r\n    render () {\r\n        if(this.state.hasError){\r\n            return <h1>Oooops. That is not good.</h1>\r\n        }\r\n        else return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React, {Component} from 'react';\nimport './App.css';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state ={\n      robotsAsState: [],\n      searchField: ''\n    }\n  }\n  componentDidMount () {\n    fetch ('https://jsonplaceholder.typicode.com/users')\n      .then(response=>response.json())\n      .then(singleRobot=>this.setState({robotsAsState:singleRobot}))\n  }\nonSearchChangeFunc = (event) => {\n  this.setState({searchField: event.target.value});\n}\n  render (){\n    const {robotsAsState, searchField} = this.state;\n    const filteredRobots = robotsAsState.filter(singleRobot => {\n      return singleRobot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n    return (\n      <div className=\"App\">\n        <h1>RoboFriends</h1>\n        <SearchBox searchChangeAsProp={this.onSearchChangeFunc}/>\n        <Scroll>\n          <ErrorBoundary>\n            <CardList robotsAsProp={filteredRobots} />\n          </ErrorBoundary>          \n        </Scroll>        \n      </div>\n    );\n      }\n}\n\nexport default App;\n\n\n        {/* <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header> */}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './containers/App';\n\nReactDOM.render(\n<App />\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}